file = here::here("output", "random_numbers5.rds")
)
library(tidyverse)
data <- read_csv("data/DATASET.csv")
install.packages("here")
library(tidyverse)
library(gt)
library(here)
data <- read_csv(here("data", "DATASET.csv"))
library(tidyverse)
library(gt)
data <- read_csv("data/DATASET.csv")
library(tidyverse)
library(gt)
data <- read_csv("data/DATASET.csv")
cd /Users/zolismith/Desktop
data <- read_csv("data/DATASET.csv")
setwd("~/Desktop/COVID FINAL")
data <- read_csv("data/DATASET.csv")
data <- read_csv("data/DATASET.csv")
data <- read.csv(params$file_path)
file.exists("data/DATASET.csv")
data <- read.csv("data/DATASET.csv")
getwd()
file.exists("data/DATASET.csv")
if (basename(getwd()) == "report") {
setwd("..")
}
if (basename(getwd()) == "report") {
setwd("..")
}
cat("Current working directory:", getwd(), "\n")
if (!file.exists("data/DATASET.csv")) {
stop("DATASET.csv not found! Make sure it's in the /data folder and you're in the project root.")
}
# Ensure correct working directory when knitting from inside /report folder
if (basename(getwd()) == "report") {
setwd("..")
}
# Print working directory for verification
cat("Current working directory:", getwd(), "\n")
# Confirm data file exists or stop rendering
if (!file.exists("data/DATASET.csv")) {
stop("ERROR: data/DATASET.csv not found. Check your working directory or folder structure.")
}
# Global chunk options
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Ensure correct working directory when knitting from inside /report folder
if (basename(getwd()) == "report") {
setwd("..")
}
# Print working directory for verification
cat("Current working directory:", getwd(), "\n")
# Confirm data file exists or stop rendering
if (!file.exists("data/DATASET.csv")) {
stop("ERROR: data/DATASET.csv not found. Check your working directory or folder structure.")
}
# Global chunk options
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
data <- read.csv("data/DATASET.csv")
data <- read.csv("data/DATASET.csv")
```{r setup, include=FALSE}
```{r setup, include=FALSE}
# Adjust working directory if knitting from inside /report
if (basename(getwd()) == "report") {
setwd("..")
}
# Confirm working directory
cat("Current working directory:", getwd(), "\n")
# Stop with a clear message if the file doesn't exist
if (!file.exists("data/DATASET.csv")) {
stop("ERROR: Cannot find data/DATASET.csv. Is your working directory the project root?")
}
# Global chunk options
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
data <- read.csv("data/DATASET.csv")
cat("Current working directory:", getwd(), "\n")
data <- read.csv("data/DATASET.csv")
if (basename(getwd()) == "report") {
setwd("..")
}
cat("Current working directory:", getwd(), "\n")
data <- read.csv("data/DATASET.csv")
head(data)
data <- read.csv(params$file_path)
source("scripts/create_required_table.R")
if (basename(getwd()) == "report") {
setwd("..")
}
cat("Current working directory:", getwd(), "\n")
data <- read.csv(params$file_path)
head(data)
source("scripts/create_required_table.R")
file.exists("scripts/create_required_table.R")
if (basename(getwd()) == "report") {
setwd("..")
}source("scripts/create_required_table.R")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_table.R")
htmltools::includeHTML("report/tables/required_table.html")
if (basename(getwd()) == "report") {
setwd("..")
}
source("/Users/zolismith/Desktop/COVID19_Vaccine_Distribution_Analysis/scripts/create_required_figure.R")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
data <- read.csv(params$file_path)
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_table.R")
htmltools::includeHTML("report/tables/required_table.html")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
file.exists("report/figures/required_figure.png")
source("scripts/create_required_figure.R")
library(tidyverse)
library(scales)
data <- read_csv("data/DATASET.csv")
data_cleaned <- data %>%
filter(!is.na(`1st Dose Allocations`), !is.na(`2nd Dose Allocations`))
summary_data <- data_cleaned %>%
group_by(Jurisdiction) %>%
summarise(
First_Dose = sum(`1st Dose Allocations`, na.rm = TRUE),
Second_Dose = sum(`2nd Dose Allocations`, na.rm = TRUE)
) %>%
arrange(desc(First_Dose + Second_Dose)) %>%
head(10)
summary_data_long <- summary_data %>%
pivot_longer(cols = c(First_Dose, Second_Dose), names_to = "Dose Type", values_to = "Allocations")
fig <- ggplot(summary_data_long, aes(x = reorder(Jurisdiction, Allocations), y = Allocations, fill = `Dose Type`)) +
geom_bar(stat = "identity", position = "stack", width = 0.6) +
scale_fill_manual(values = c("First_Dose" = "#1f77b4", "Second_Dose" = "#ff7f0e"),
labels = c("First Dose", "Second Dose")) +
coord_flip() +
scale_y_continuous(labels = comma) +
labs(title = "Top 10 Jurisdictions by Total Vaccine Allocations",
x = "Jurisdiction",
y = "Total Allocations",
fill = "Dose Type") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold"),
legend.position = "top",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
dir.create("report/figures", recursive = TRUE, showWarnings = FALSE)
ggsave("report/figures/required_figure.png", plot = fig, width = 10, height = 6)
source("scripts/create_required_figure.R")
source("scripts/create_required_figure.R")
source("scripts/create_required_figure.R")
file.exists("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
file.exists("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
data <- read.csv(params$file_path)
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_table.R")
htmltools::includeHTML("report/tables/required_table.html")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
source("scripts/create_required_figure.R")
file.exists("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
data <- read.csv(params$file_path)
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_table.R")
htmltools::includeHTML("report/tables/required_table.html")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
data <- read.csv(params$file_path)
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_table.R")
htmltools::includeHTML("report/tables/required_table.html")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("figures/required_figure.png")
ggsave(filename = "report/figures/required_figure.png")
if (basename(getwd()) == "report") {
setwd("..")
}
data <- read.csv(params$file_path)
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_table.R")
htmltools::includeHTML("report/tables/required_table.html")
if (basename(getwd()) == "report") {
setwd("..")
}
source("scripts/create_required_figure.R")
knitr::include_graphics("report/figures/required_figure.png")
library(here)
read.csv(here("data", "DATASET.csv"))
setwd("/Users/zolismith/Desktop/COVID FINAL")
renv::init()
renv::snapshot()
renv::snapshot()
# Upper tail (observed more than expected)
1 - pbinom(792-1, 1315, 67547/134693)
summary <- ga_data %>%
mutate(month = floor_date(date, "month")) %>%
group_by(county_names, month) %>%
summarise(
mean_ptc = mean(ptc_15d, na.rm = TRUE),
max_ptc = max(ptc_15d, na.rm = TRUE),
.groups = "drop"
)
here::i_am("code/0_clean_data.R")
cd /Users/zolismith/Desktop/wastewater_project
here::i_am("code/0_clean_data.R")
setwd(/Users/zolismith/Desktop/wastewater_project)
setwd("/Users/zolismith/Desktop/wastewater_project")
here::i_am("code/0_clean_data.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
here::i_am("code/0_clean_data.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
clean_data <- readRDS("~/Desktop/wastewater_project/data/clean_data.rds")
library(readr)
georgia_data <- read_csv("data/georgia_data.csv")
View(georgia_data)
Potential viarbales?
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
install.packages("dplyr")
library(dplyr)
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
install.packages("dplyr")
library(stringr)
install.packages("dplyr")
library(dplyr)
install.packages("stringr")
library(stringr)
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
install.packages("stringr")
install.packages("dplyr")
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
install.packages("dplyr")
library(dplyr)
install.packages("stringr")
library(stringr)
here::i_am("code/2_time_series_plot.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
install.packages("stringr")
install.packages("dplyr")
here::i_am("code/2_time_series_plot.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
var_label(raw_wastewater_data) <- list(
wwtp_jurisdiction = "State",
wwtp_id = "Treatment Plant ID",
reporting_jurisdiction = "Reporting State",
sample_location = "Sample Collection Point",
sample_location_specify = "Upstream Location ID",
key_plot_id = "Sewershed Identifier", #unique identifier for the sewershed (geog area of sampling site)
county_names = "Counties Served",
county_fips = "County FIPS Codes",
population_served = "Population Coverage", #no of people served by the sampling site
date_start = "Period Start Date",
date_end = "Period End Date",
ptc_15d = "15-Day Percent Change", # % change in covid levels over the 15-days, calculated from linear regression of log-transformed data.
detect_prop_15d = "15-Day Detection Rate", #proportion of tests detecting covid over the 15-day period.
percentile = "Historical Percentile Rank", #How current covid levels compare to historical levels at the same site (0% = lowest ever, 100% = highest ever).
sampling_prior = "Pre-December 2021 Sampling" # yes or no
)
here::i_am("code/0_clean_data.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
ls /Users/zolismith/Desktop/wastewater_project/data/
setwd("/Users/zolismith/Desktop/wastewater_project/data")
setwd("wastewater_project/data")
setwd("Desktop/wastewater_project/data")
here::i_am("code/0_clean_data.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
library(labelled)
library(gtsummary)
library(dplyr)
# Rename the headers with more descriptive labels
var_label(raw_wastewater_data) <- list(
wwtp_jurisdiction = "State",
wwtp_id = "Treatment Plant ID",
reporting_jurisdiction = "Reporting State",
sample_location = "Sample Collection Point",
sample_location_specify = "Upstream Location ID",
key_plot_id = "Sewershed Identifier", #unique identifier for the sewershed (geog area of sampling site)
county_names = "Counties Served",
county_fips = "County FIPS Codes",
population_served = "Population Coverage", #no of people served by the sampling site
date_start = "Period Start Date",
date_end = "Period End Date",
ptc_15d = "15-Day Percent Change", # % change in covid levels over the 15-days, calculated from linear regression of log-transformed data.
detect_prop_15d = "15-Day Detection Rate", #proportion of tests detecting covid over the 15-day period.
percentile = "Historical Percentile Rank", #How current covid levels compare to historical levels at the same site (0% = lowest ever, 100% = highest ever).
sampling_prior = "Pre-December 2021 Sampling" # yes or no
)
# We are going to focus on Fulton County, Georgia
fulton_data <- raw_wastewater_data %>%
filter(wwtp_jurisdiction %in% c("Georgia")) %>%
filter(county_names == "Fulton")
saveRDS(
fulton_data,
file = here::here("data/clean_data.rds")
)
print("I cleaned the data without any errors!")
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
install.packages("dplyr")
library(dplyr)
install.packages("stringr")
library(stringr)
here::i_am("code/2_time_series_plot.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
install.packages("stringr")
install.packages("dplyr")
here::i_am("code/2_time_series_plot.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
rlang::last_trace()
#set directory to project directory
#Eseza's computer: setwd("C:/Users/nesez/OneDrive/Desktop/Data_Science_Toolkit/midterm/wastewater_project")
#Zoli's computer:
here::i_am("code/0_clean_data.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
library(labelled)
library(gtsummary)
library(dplyr)
# Rename the headers with more descriptive labels
raw_wastewater_data <- raw_wastewater_data %>%
rename(
State = wwtp_jurisdiction,
TreatmentPlantID = wwtp_id,
ReportingState = reporting_jurisdiction,
SampleCollectionPoint = sample_location,
UpstreamLocationID = sample_location_specify,
SewershedIdentifier = key_plot_id,
CountiesServed = county_names,
CountyFIPSCodes = county_fips,
PopulationCoverage = population_served,
PeriodStartDate = date_start,
PeriodEndDate = date_end,
Day15PercentChange = ptc_15d,
Day15DetectionRate = detect_prop_15d,
HistoricalPercentileRank = percentile,
PreDecember2021Sampling = sampling_prior
)
# We are going to focus on Fulton County, Georgia
fulton_data <- raw_wastewater_data %>%
filter(wwtp_jurisdiction %in% c("Georgia")) %>%
filter(county_names == "Fulton")
ga_data <- data %>%
filter(str_detect(reporting_jurisdiction, "Georgia")) %>%
filter(!is.na(ptc_15d)) %>%
mutate(date = ymd(date_start))
#set directory to project directory
#Eseza's computer: setwd("C:/Users/nesez/OneDrive/Desktop/Data_Science_Toolkit/midterm/wastewater_project")
#Zoli's computer:
here::i_am("code/0_clean_data.R")
absolute_path_to_data <- here::here("data", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250307.csv")
raw_wastewater_data <- read.csv(absolute_path_to_data, header = TRUE)
library(labelled)
library(gtsummary)
library(dplyr)
# Rename the headers with more descriptive labels
var_label(raw_wastewater_data) <- list(
wwtp_jurisdiction = "State",
wwtp_id = "Treatment Plant ID",
reporting_jurisdiction = "Reporting State",
sample_location = "Sample Collection Point",
sample_location_specify = "Upstream Location ID",
key_plot_id = "Sewershed Identifier", #unique identifier for the sewershed (geog area of sampling site)
county_names = "Counties Served",
county_fips = "County FIPS Codes",
population_served = "Population Coverage", #no of people served by the sampling site
date_start = "Period Start Date",
date_end = "Period End Date",
ptc_15d = "15-Day Percent Change", # % change in covid levels over the 15-days, calculated from linear regression of log-transformed data.
detect_prop_15d = "15-Day Detection Rate", #proportion of tests detecting covid over the 15-day period.
percentile = "Historical Percentile Rank", #How current covid levels compare to historical levels at the same site (0% = lowest ever, 100% = highest ever).
sampling_prior = "Pre-December 2021 Sampling" # yes or no
)
# We are going to focus on Fulton County, Georgia
fulton_data <- raw_wastewater_data %>%
filter(wwtp_jurisdiction %in% c("Georgia")) %>%
filter(county_names == "Fulton")
#---------------------------------------------------------------------------------------------------------------
# Save the data as an RDS file
saveRDS(
fulton_data,
file = here::here("data/clean_data.rds")
)
print("I cleaned the data without any errors!")
library(dplyr)
library(tidyr)
geographic_summary <- raw_wastewater_data %>%
select(wwtp_jurisdiction, county_names, county_fips, key_plot_id, sample_location, population_served) %>%
group_by(wwtp_jurisdiction, county_names, county_fips) %>%
summarise(
TotalPopulation = sum(population_served, na.rm = TRUE),  # Total population served
SampleCount = n(),
.groups = 'drop'
) %>%
left_join(raw_wastewater_data %>%
select(county_fips, key_plot_id) %>%
distinct(),
by = "county_fips") %>%
mutate(
SampleLocationType = case_when(
str_detect(sample_location, "Treatment") ~ "Treatment Plant",
str_detect(sample_location, "Upstream") ~ "Upstream",
TRUE ~ "Other"
)
)
file.create("code/03_zoli_analysis.R")
print("Step 2 complete – code ran without errors!")
here::i_am("code/03_zoli_time_series.R")
setwd("/Users/zolismith/Desktop/wastewater_project")
here::i_am("code/03_zoli_time_series.R")
here::i_am("code/03_zoli_time_series.R")
